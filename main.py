#!/usr/bin/env python3
"""
PyCheatEngine - Sistema de Engenharia Reversa e Manipula√ß√£o de Mem√≥ria
Arquivo principal de inicializa√ß√£o do programa

Este √© o ponto de entrada principal do PyCheatEngine, oferecendo op√ß√µes para
executar tanto a interface gr√°fica quanto a interface de linha de comando.

Autor: PyCheatEngine Team
Vers√£o: 1.0.0
"""

import sys
import os
import ctypes
import platform
import argparse
from typing import Optional

def check_admin_privileges() -> bool:
    """
    Verifica se o programa est√° sendo executado com privil√©gios administrativos
    
    Returns:
        bool: True se tem privil√©gios administrativos, False caso contr√°rio
    """
    try:
        if platform.system() == "Windows":
            return ctypes.windll.shell32.IsUserAnAdmin() != 0
        else:
            # Para sistemas Unix-like
            return os.geteuid() == 0
    except Exception:
        return False

def request_admin_privileges():
    """
    Solicita privil√©gios administrativos para o programa
    """
    if platform.system() == "Windows":
        try:
            # Tenta reexecutar o programa como administrador
            ctypes.windll.shell32.ShellExecuteW(
                None, 
                "runas", 
                sys.executable, 
                " ".join(sys.argv), 
                None, 
                1
            )
        except Exception as e:
            print(f"Erro ao solicitar privil√©gios administrativos: {e}")
    else:
        print("Execute o programa com 'sudo' para obter privil√©gios administrativos:")
        print(f"sudo python3 {sys.argv[0]}")

def show_banner():
    """Exibe o banner do programa"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                              PyCheatEngine v1.0.0                           ‚ïë
‚ïë                    Sistema de Engenharia Reversa e Manipula√ß√£o              ‚ïë
‚ïë                              de Mem√≥ria em Python                           ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                                              ‚ïë
‚ïë  Funcionalidades:                                                           ‚ïë
‚ïë  ‚Ä¢ Scanner de mem√≥ria com m√∫ltiplos tipos de dados                          ‚ïë
‚ïë  ‚Ä¢ Resolu√ß√£o de cadeias de ponteiros (pointer chains)                       ‚ïë
‚ïë  ‚Ä¢ Scanner de padr√µes de bytes (AOB) com suporte a wildcards                ‚ïë
‚ïë  ‚Ä¢ Interface gr√°fica intuitiva                                              ‚ïë
‚ïë  ‚Ä¢ Interface de linha de comando                                            ‚ïë
‚ïë  ‚Ä¢ Sistema de sess√µes para salvar/carregar estado                           ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  AVISO: Este programa requer privil√©gios administrativos para acessar       ‚ïë
‚ïë         a mem√≥ria de outros processos. Use com responsabilidade!            ‚ïë
‚ïë                                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def show_main_menu() -> str:
    """
    Exibe o menu principal e retorna a escolha do usu√°rio
    
    Returns:
        str: Op√ß√£o escolhida pelo usu√°rio
    """
    menu = """
Escolha uma op√ß√£o:

[1] Interface Gr√°fica (GUI) - Recomendado para usu√°rios iniciantes
[2] Interface de Linha de Comando (CLI) - Para usu√°rios avan√ßados
[3] Mostrar informa√ß√µes do sistema
[4] Verificar privil√©gios
[5] Ajuda
[0] Sair

"""
    print(menu)
    
    while True:
        try:
            choice = input("Digite sua op√ß√£o (0-5): ").strip()
            if choice in ['0', '1', '2', '3', '4', '5']:
                return choice
            else:
                print("Op√ß√£o inv√°lida. Digite um n√∫mero entre 0 e 5.")
        except (EOFError, KeyboardInterrupt):
            return '0'

def show_system_info():
    """Exibe informa√ß√µes do sistema"""
    try:
        import psutil
        
        print("\n" + "="*60)
        print("INFORMA√á√ïES DO SISTEMA")
        print("="*60)
        
        # Informa√ß√µes b√°sicas
        print(f"Sistema Operacional: {platform.system()} {platform.release()}")
        print(f"Arquitetura: {platform.machine()}")
        print(f"Vers√£o Python: {sys.version}")
        
        # Informa√ß√µes de mem√≥ria
        memory = psutil.virtual_memory()
        print(f"Mem√≥ria Total: {memory.total / (1024**3):.2f} GB")
        print(f"Mem√≥ria Dispon√≠vel: {memory.available / (1024**3):.2f} GB")
        print(f"Uso de Mem√≥ria: {memory.percent}%")
        
        # Informa√ß√µes de CPU
        print(f"CPU: {platform.processor()}")
        print(f"N√∫cleos: {psutil.cpu_count(logical=False)} f√≠sicos, {psutil.cpu_count(logical=True)} l√≥gicos")
        
        # Privil√©gios
        is_admin = check_admin_privileges()
        print(f"Privil√©gios Administrativos: {'Sim' if is_admin else 'N√£o'}")
        
        # N√∫mero de processos
        process_count = len(psutil.pids())
        print(f"Processos em Execu√ß√£o: {process_count}")
        
        print("="*60)
        
    except ImportError:
        print("\nErro: Biblioteca 'psutil' n√£o encontrada.")
        print("Instale com: pip install psutil")
    except Exception as e:
        print(f"\nErro ao obter informa√ß√µes do sistema: {e}")

def show_help():
    """Exibe informa√ß√µes de ajuda"""
    help_text = """
AJUDA - PyCheatEngine

REQUISITOS:
‚Ä¢ Windows (recomendado) ou Linux
‚Ä¢ Python 3.8 ou superior
‚Ä¢ Privil√©gios administrativos
‚Ä¢ Bibliotecas: psutil, tkinter (GUI)

COMO USAR:

1. Interface Gr√°fica (GUI):
   - Mais f√°cil para iniciantes
   - Interface visual intuitiva
   - Todas as funcionalidades dispon√≠veis atrav√©s de menus

2. Interface de Linha de Comando (CLI):
   - Para usu√°rios avan√ßados
   - Controle total via comandos
   - Ideal para automa√ß√£o e scripts

FUNCIONALIDADES PRINCIPAIS:

‚Ä¢ Scanner de Mem√≥ria:
  - Busca valores na mem√≥ria de processos
  - Suporte a int32, int64, float, double, string
  - Compara√ß√µes: igual, maior, menor, alterado, etc.

‚Ä¢ Ponteiros:
  - Resolu√ß√£o de cadeias de ponteiros
  - √ötil para valores que mudam de endere√ßo
  - Suporte a m√∫ltiplos n√≠veis de indire√ß√£o

‚Ä¢ Scanner AOB (Array of Bytes):
  - Busca padr√µes de bytes na mem√≥ria
  - Suporte a wildcards (??)
  - √ötil para encontrar c√≥digo espec√≠fico

‚Ä¢ Sess√µes:
  - Salva estado atual do programa
  - Carrega sess√µes anteriores
  - Formato JSON leg√≠vel

SEGURAN√áA:
‚Ä¢ Use apenas em processos pr√≥prios ou autorizados
‚Ä¢ N√£o utilize para trapacear em jogos online
‚Ä¢ Cuidado com processos cr√≠ticos do sistema

TROUBLESHOOTING:
‚Ä¢ Se n√£o conseguir anexar a um processo, verifique privil√©gios
‚Ä¢ Para processos 64-bit, use Python 64-bit
‚Ä¢ Alguns antiv√≠rus podem detectar como falso positivo

Para mais informa√ß√µes, consulte a documenta√ß√£o ou o c√≥digo fonte.
    """
    print(help_text)

def run_gui():
    """Executa a interface gr√°fica"""
    try:
        print("\nInicializando interface gr√°fica...")
        print("Aguarde enquanto a janela √© carregada...")
        
        # Adiciona o diret√≥rio atual ao path para resolver imports
        import sys
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        
        import ui.gui
        CheatEngineGUI = ui.gui.CheatEngineGUI
        
        # Cria e executa a GUI
        gui = CheatEngineGUI()
        gui.run()
        
    except ImportError as e:
        print(f"\nErro ao importar interface gr√°fica: {e}")
        print("Verifique se o tkinter est√° instalado corretamente.")
        if platform.system() == "Linux":
            print("No Ubuntu/Debian: sudo apt-get install python3-tk")
            print("No CentOS/RHEL: sudo yum install tkinter")
    except Exception as e:
        print(f"\nErro na interface gr√°fica: {e}")
        print("Tente usar a interface de linha de comando (op√ß√£o 2)")
        print("Ou execute: python main.py --cli")

def run_cli():
    """Executa a interface de linha de comando"""
    try:
        print("\nInicializando interface de linha de comando...")
        
        # Adiciona o diret√≥rio atual ao path para resolver imports
        import sys
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        
        import ui.cli
        CheatEngineCLI = ui.cli.CheatEngineCLI
        
        # Cria e executa a CLI
        cli = CheatEngineCLI()
        cli.run()
        
    except Exception as e:
        print(f"\nErro na interface CLI: {e}")

def run_web_demo():
    """Executa o demo web interativo"""
    try:
        print("\nüåê Iniciando Demo Web Interativo...")
        print("Este modo funciona perfeitamente no Replit e outros ambientes web!")
        print("\nRecursos dispon√≠veis:")
        print("‚Ä¢ Interface moderna e responsiva")
        print("‚Ä¢ Demonstra√ß√µes interativas de todas as funcionalidades")
        print("‚Ä¢ Log em tempo real das opera√ß√µes")
        print("‚Ä¢ Compat√≠vel com qualquer navegador")
        print("\nAguarde enquanto o servidor web √© iniciado...")
        
        # Executa o web demo completo
        os.system("python web_demo_completo.py")
        
    except KeyboardInterrupt:
        print("\n\nDemo web interrompido pelo usu√°rio.")
    except Exception as e:
        print(f"\nErro no demo web: {e}")
        print("Tente executar diretamente: python web_demo_completo.py")

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    required_modules = ['psutil', 'tkinter']
    missing_modules = []
    
    for module in required_modules:
        try:
            if module == 'tkinter':
                import tkinter
            else:
                __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print(f"\nAVISO: M√≥dulos faltando: {', '.join(missing_modules)}")
        print("Instale com: pip install " + " ".join(missing_modules))
        return False
    
    return True

def parse_arguments():
    """Analisa argumentos da linha de comando"""
    parser = argparse.ArgumentParser(
        description='PyCheatEngine - Sistema de Engenharia Reversa e Manipula√ß√£o de Mem√≥ria',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python main.py              # Menu interativo
  python main.py --gui        # Interface gr√°fica direta
  python main.py --cli        # Interface CLI direta
  python main.py --info       # Informa√ß√µes do sistema
        """
    )
    
    parser.add_argument('--gui', action='store_true',
                       help='Executa diretamente a interface gr√°fica')
    parser.add_argument('--cli', action='store_true',
                       help='Executa diretamente a interface CLI')
    parser.add_argument('--info', action='store_true',
                       help='Mostra informa√ß√µes do sistema e sai')
    parser.add_argument('--no-admin-check', action='store_true',
                       help='Pula verifica√ß√£o de privil√©gios administrativos')
    parser.add_argument('--version', action='version', version='PyCheatEngine 1.0.0')
    
    return parser.parse_args()

def main():
    """Fun√ß√£o principal do programa"""
    try:
        # Analisa argumentos
        args = parse_arguments()
        
        # Mostra banner
        show_banner()
        
        # Verifica depend√™ncias
        if not check_dependencies():
            print("\nInstale as depend√™ncias necess√°rias antes de continuar.")
            return 1
        
        # Verifica privil√©gios administrativos
        if not args.no_admin_check:
            if not check_admin_privileges():
                print("\n‚ö†Ô∏è  AVISO: O programa n√£o est√° sendo executado com privil√©gios administrativos!")
                print("Algumas funcionalidades podem n√£o funcionar corretamente.")
                print("Para melhor experi√™ncia, execute como administrador.")
                
                if platform.system() == "Windows":
                    response = input("\nDeseja tentar executar como administrador? (s/N): ").lower()
                    if response in ['s', 'sim', 'y', 'yes']:
                        request_admin_privileges()
                        return 0
                else:
                    print(f"Execute: sudo python3 {sys.argv[0]}")
                
                response = input("\nContinuar mesmo assim? (s/N): ").lower()
                if response not in ['s', 'sim', 'y', 'yes']:
                    return 0
        
        # Execu√ß√£o baseada em argumentos
        if args.info:
            show_system_info()
            return 0
        elif args.gui:
            run_gui()
            return 0
        elif args.cli:
            run_cli()
            return 0
        
        # Menu principal interativo
        while True:
            choice = show_main_menu()
            
            if choice == '0':
                print("\nObrigado por usar o PyCheatEngine!")
                break
            elif choice == '1':
                run_gui()
            elif choice == '2':
                run_cli()
            elif choice == '3':
                show_system_info()
            elif choice == '4':
                is_admin = check_admin_privileges()
                print(f"\nPrivil√©gios Administrativos: {'‚úì Sim' if is_admin else '‚úó N√£o'}")
                if not is_admin:
                    print("Execute o programa como administrador para melhor funcionalidade.")
            elif choice == '5':
                show_help()
            
            # Pausa antes de mostrar o menu novamente
            if choice != '0':
                input("\nPressione Enter para continuar...")
        
        return 0
        
    except KeyboardInterrupt:
        print("\n\nPrograma interrompido pelo usu√°rio.")
        return 1
    except Exception as e:
        print(f"\nErro inesperado: {e}")
        print("Se o problema persistir, verifique a instala√ß√£o ou contate o suporte.")
        return 1

if __name__ == "__main__":
    # Define o t√≠tulo da janela do console no Windows
    if platform.system() == "Windows":
        try:
            ctypes.windll.kernel32.SetConsoleTitleW("PyCheatEngine v1.0.0")
        except:
            pass
    
    # Executa o programa principal
    exit_code = main()
    sys.exit(exit_code)
