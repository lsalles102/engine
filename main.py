#!/usr/bin/env python3
"""
PyCheatEngine - Sistema de Engenharia Reversa e Manipula√ß√£o de Mem√≥ria
Arquivo principal de inicializa√ß√£o do programa

Este √© o ponto de entrada principal do PyCheatEngine, oferecendo op√ß√µes para
executar tanto a interface gr√°fica quanto a interface de linha de comando.

Autor: PyCheatEngine Team
Vers√£o: 1.0.0
"""

import sys
import os
import ctypes
import platform
import argparse
from typing import Optional

def check_admin_privileges() -> bool:
    """
    Verifica se o programa est√° sendo executado com privil√©gios administrativos

    Returns:
        bool: True se tem privil√©gios administrativos, False caso contr√°rio
    """
    try:
        if platform.system() == 'Windows':
            import ctypes
            try:
                return ctypes.windll.shell32.IsUserAnAdmin() != 0
            except (AttributeError, OSError):
                return False
        else:
            return os.geteuid() == 0
    except (ImportError, AttributeError, OSError):
        return False

def request_admin_privileges():
    """
    Solicita privil√©gios administrativos para o programa
    """
    if platform.system() == "Windows":
        try:
            # Tenta reexecutar o programa como administrador
            ctypes.windll.shell32.ShellExecuteW(
                None, 
                "runas", 
                sys.executable, 
                " ".join(sys.argv), 
                None, 
                1
            )
        except Exception as e:
            print(f"Erro ao solicitar privil√©gios administrativos: {e}")
    else:
        print("Execute o programa com 'sudo' para obter privil√©gios administrativos:")
        print(f"sudo python3 {sys.argv[0]}")

def show_banner():
    """Exibe o banner do programa"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                              PyCheatEngine v1.0.0                           ‚ïë
‚ïë                    Sistema de Engenharia Reversa e Manipula√ß√£o              ‚ïë
‚ïë                              de Mem√≥ria em Python                           ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                                              ‚ïë
‚ïë  Funcionalidades:                                                           ‚ïë
‚ïë  ‚Ä¢ Scanner de mem√≥ria com m√∫ltiplos tipos de dados                          ‚ïë
‚ïë  ‚Ä¢ Resolu√ß√£o de cadeias de ponteiros (pointer chains)                       ‚ïë
‚ïë  ‚Ä¢ Scanner de padr√µes de bytes (AOB) com suporte a wildcards                ‚ïë
‚ïë  ‚Ä¢ Interface gr√°fica intuitiva                                              ‚ïë
‚ïë  ‚Ä¢ Interface de linha de comando                                            ‚ïë
‚ïë  ‚Ä¢ Sistema de sess√µes para salvar/carregar estado                           ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  AVISO: Este programa requer privil√©gios administrativos para acessar       ‚ïë
‚ïë         a mem√≥ria de outros processos. Use com responsabilidade!            ‚ïë
‚ïë                                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def show_main_menu() -> str:
    """
    Exibe o menu principal e retorna a escolha do usu√°rio

    Returns:
        str: Op√ß√£o escolhida pelo usu√°rio
    """
    menu = """
Escolha uma op√ß√£o:

[1] Interface Gr√°fica (GUI) - Recomendado para usu√°rios iniciantes
[2] Interface de Linha de Comando (CLI) - Para usu√°rios avan√ßados
[3] Mostrar informa√ß√µes do sistema
[4] Verificar privil√©gios
[5] Ajuda

"""
    print(menu)

    while True:
        try:
            choice = input("Digite sua op√ß√£o (0-5): ").strip()
            if choice in ['0', '1', '2', '3', '4', '5']:
                return choice
            else:
                print("Op√ß√£o inv√°lida. Digite um n√∫mero entre 0 e 5.")
        except (EOFError, KeyboardInterrupt):
            return '0'

def show_system_info():
    """Exibe informa√ß√µes do sistema"""
    try:
        import psutil

        print("\n" + "="*60)
        print("INFORMA√á√ïES DO SISTEMA")
        print("="*60)

        # Informa√ß√µes b√°sicas
        print(f"Sistema Operacional: {platform.system()} {platform.release()}")
        print(f"Arquitetura: {platform.machine()}")
        print(f"Vers√£o Python: {sys.version}")

        # Informa√ß√µes de mem√≥ria
        memory = psutil.virtual_memory()
        print(f"Mem√≥ria Total: {memory.total / (1024**3):.2f} GB")
        print(f"Mem√≥ria Dispon√≠vel: {memory.available / (1024**3):.2f} GB")
        print(f"Uso de Mem√≥ria: {memory.percent}%")

        # Informa√ß√µes de CPU
        print(f"CPU: {platform.processor()}")
        print(f"N√∫cleos: {psutil.cpu_count(logical=False)} f√≠sicos, {psutil.cpu_count(logical=True)} l√≥gicos")

        # Privil√©gios
        is_admin = check_admin_privileges()
        print(f"Privil√©gios Administrativos: {'Sim' if is_admin else 'N√£o'}")

        # N√∫mero de processos
        process_count = len(psutil.pids())
        print(f"Processos em Execu√ß√£o: {process_count}")

        print("="*60)

    except ImportError:
        print("\nErro: Biblioteca 'psutil' n√£o encontrada.")
        print("Instale com: pip install psutil")
    except Exception as e:
        print(f"\nErro ao obter informa√ß√µes do sistema: {e}")

def show_help():
    """Exibe informa√ß√µes de ajuda"""
    help_text = """
AJUDA - PyCheatEngine

REQUISITOS:
‚Ä¢ Windows (recomendado) ou Linux
‚Ä¢ Python 3.8 ou superior
‚Ä¢ Privil√©gios administrativos
‚Ä¢ Bibliotecas: psutil, tkinter (GUI)

COMO USAR:

1. Interface Gr√°fica (GUI):
   - Mais f√°cil para iniciantes
   - Interface visual intuitiva
   - Todas as funcionalidades dispon√≠veis atrav√©s de menus

2. Interface de Linha de Comando (CLI):
   - Para usu√°rios avan√ßados
   - Controle total via comandos
   - Ideal para automa√ß√£o e scripts

FUNCIONALIDADES PRINCIPAIS:

‚Ä¢ Scanner de Mem√≥ria:
  - Busca valores na mem√≥ria de processos
  - Suporte a int32, int64, float, double, string
  - Compara√ß√µes: igual, maior, menor, alterado, etc.

‚Ä¢ Ponteiros:
  - Resolu√ß√£o de cadeias de ponteiros
  - √ötil para valores que mudam de endere√ßo
  - Suporte a m√∫ltiplos n√≠veis de indire√ß√£o

‚Ä¢ Scanner AOB (Array of Bytes):
  - Busca padr√µes de bytes na mem√≥ria
  - Suporte a wildcards (??)
  - √ötil para encontrar c√≥digo espec√≠fico

‚Ä¢ Sess√µes:
  - Salva estado atual do programa
  - Carrega sess√µes anteriores
  - Formato JSON leg√≠vel

SEGURAN√áA:
‚Ä¢ Use apenas em processos pr√≥prios ou autorizados
‚Ä¢ N√£o utilize para trapacear em jogos online
‚Ä¢ Cuidado com processos cr√≠ticos do sistema

TROUBLESHOOTING:
‚Ä¢ Se n√£o conseguir anexar a um processo, verifique privil√©gios
‚Ä¢ Para processos 64-bit, use Python 64-bit
‚Ä¢ Alguns antiv√≠rus podem detectar como falso positivo

Para mais informa√ß√µes, consulte a documenta√ß√£o ou o c√≥digo fonte.
    """
    print(help_text)

def run_gui():
    """Executa a interface gr√°fica"""
    try:
        print("\nInicializando interface gr√°fica...")
        print("Aguarde enquanto a janela √© carregada...")

        # Adiciona o diret√≥rio atual ao path para resolver imports
        import sys
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

        import ui.gui
        CheatEngineGUI = ui.gui.CheatEngineGUI

        # Cria e executa a GUI
        gui = CheatEngineGUI()
        gui.run()

    except ImportError as e:
        print(f"\nErro ao importar interface gr√°fica: {e}")
        print("Verifique se o tkinter est√° instalado corretamente.")
        if platform.system() == "Linux":
            print("No Ubuntu/Debian: sudo apt-get install python3-tk")
            print("No CentOS/RHEL: sudo yum install tkinter")
    except Exception as e:
        print(f"\nErro na interface gr√°fica: {e}")
        print("Tente usar a interface de linha de comando (op√ß√£o 2)")
        print("Ou execute: python main.py --cli")

def run_cli():
    """Executa a interface de linha de comando"""
    try:
        print("\nInicializando interface de linha de comando...")

        # Adiciona o diret√≥rio atual ao path para resolver imports
        import sys
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

        import ui.cli
        CheatEngineCLI = ui.cli.CheatEngineCLI

        # Cria e executa a CLI
        cli = CheatEngineCLI()
        cli.run()

    except Exception as e:
        print(f"\nErro na interface CLI: {e}")

def run_web_demo():
    """Executa o demo web interativo"""
    try:
        print("\nüåê Iniciando Demo Web Interativo...")
        print("Este modo funciona perfeitamente no Replit e outros ambientes web!")
        print("\nRecursos dispon√≠veis:")
        print("‚Ä¢ Interface moderna e responsiva")
        print("‚Ä¢ Demonstra√ß√µes interativas de todas as funcionalidades")
        print("‚Ä¢ Log em tempo real das opera√ß√µes")
        print("‚Ä¢ Compat√≠vel com qualquer navegador")
        print("\nAguarde enquanto o servidor web √© iniciado...")

        # Executa o web demo completo
        os.system("python web_demo_completo.py")

    except KeyboardInterrupt:
        print("\n\nDemo web interrompido pelo usu√°rio.")
    except Exception as e:
        print(f"\nErro no demo web: {e}")
        print("Tente executar diretamente: python web_demo_completo.py")

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    required_modules = ['psutil', 'tkinter']
    missing_modules = []

    for module in required_modules:
        try:
            if module == 'tkinter':
                import tkinter
            else:
                __import__(module)
        except ImportError:
            missing_modules.append(module)

    if missing_modules:
        print(f"\nAVISO: M√≥dulos faltando: {', '.join(missing_modules)}")
        print("Instale com: pip install " + " ".join(missing_modules))
        return False

    return True

def parse_arguments():
    """Analisa argumentos da linha de comando"""
    parser = argparse.ArgumentParser(
        description='PyCheatEngine - Sistema de Engenharia Reversa e Manipula√ß√£o de Mem√≥ria',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python main.py              # Menu interativo
  python main.py --gui        # Interface gr√°fica direta
  python main.py --cli        # Interface CLI direta
  python main.py --info       # Informa√ß√µes do sistema
        """
    )

    parser.add_argument('--gui', action='store_true',
                       help='Executa diretamente a interface gr√°fica')
    parser.add_argument('--cli', action='store_true',
                       help='Executa diretamente a interface CLI')
    parser.add_argument('--info', action='store_true',
                       help='Mostra informa√ß√µes do sistema e sai')
    parser.add_argument('--no-admin-check', action='store_true',
                       help='Pula verifica√ß√£o de privil√©gios administrativos')
    parser.add_argument('--version', action='version', version='PyCheatEngine 1.0.0')

    return parser.parse_args()

def main():
    """Fun√ß√£o principal do programa"""
    try:
        # Configura logging para debug
        import logging
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

        # Analisa argumentos
        args = parse_arguments()

        # Mostra banner
        show_banner()

        # Verifica depend√™ncias
        if not check_dependencies():
            print("\nInstale as depend√™ncias necess√°rias antes de continuar.")
            return 1

        # Verifica privil√©gios administrativos
        if not args.no_admin_check:
            if not check_admin_privileges():
                print("\n‚ö†Ô∏è  AVISO: O programa n√£o est√° sendo executado com privil√©gios administrativos!")
                print("Algumas funcionalidades podem n√£o funcionar corretamente.")
                print("Para melhor experi√™ncia, execute como administrador.")

                if platform.system() == "Windows":
                    response = input("\nDeseja tentar executar como administrador? (s/N): ").lower()
                    if response in ['s', 'sim', 'y', 'yes']:
                        request_admin_privileges()
                        return 0
                else:
                    print(f"Execute: sudo python3 {sys.argv[0]}")

                response = input("\nContinuar mesmo assim? (s/N): ").lower()
                if response not in ['s', 'sim', 'y', 'yes']:
                    return 0

        # Execu√ß√£o baseada em argumentos
        if args.info:
            show_system_info()
            return 0
        elif args.gui:
            run_gui()
            return 0
        elif args.cli:
            run_cli()
            return 0

        # Menu principal interativo
        while True:
            choice = show_main_menu()

            if choice == '0':
                print("\nObrigado por usar o PyCheatEngine!")
                break
            elif choice == '1':
                run_gui()
            elif choice == '2':
                run_cli()
            elif choice == '3':
                show_system_info()
            elif choice == '4':
                is_admin = check_admin_privileges()
                print(f"\nPrivil√©gios Administrativos: {'‚úì Sim' if is_admin else '‚úó N√£o'}")
                if not is_admin:
                    print("Execute o programa como administrador para melhor funcionalidade.")
            elif choice == '5':
                show_help()

            # Pausa antes de mostrar o menu novamente
            if choice != '0':
                input("\nPressione Enter para continuar...")

        return 0

    except KeyboardInterrupt:
        print("\n\nPrograma interrompido pelo usu√°rio.")
        return 1
    except Exception as e:
        print(f"\nErro inesperado: {e}")
        print("Se o problema persistir, verifique a instala√ß√£o ou contate o suporte.")
        return 1

    
# Adicionando a fun√ß√£o handle_viewmatrix_scanner e modificando a fun√ß√£o show_main_menu

def show_main_menu() -> str:
    """
    Exibe o menu principal e retorna a escolha do usu√°rio

    Returns:
        str: Op√ß√£o escolhida pelo usu√°rio
    """
    menu = """
Escolha uma op√ß√£o:

1. Scanner de Mem√≥ria
2. Resolu√ß√£o de Ponteiros
3. Editar Valor na Mem√≥ria
4. Anexar a um Processo
5. Detalhes do Processo
6. Busca AOB (Array of Bytes)
7. ViewMatrix Scanner
8. Sair
--------------------------------------------------
"""
    print(menu)

    while True:
        choice = input("Digite sua op√ß√£o (1-8): ").strip()
        if choice in ['1', '2', '3', '4', '5', '6', '7', '8']:
            return choice
        else:
            print("Op√ß√£o inv√°lida. Digite um n√∫mero entre 1 e 8.")

# Adicionando a fun√ß√£o handle_viewmatrix_scanner
def handle_viewmatrix_scanner():
    """Gerencia busca por ViewMatrix"""
    from viewmatrix import ViewMatrixScanner

    # Garante que memory_manager est√° acess√≠vel
    global memory_manager

    if not memory_manager.is_attached():
        print("‚ùå Nenhum processo anexado")
        return

    try:
        print("\nüéØ VIEWMATRIX SCANNER")
        print("=" * 50)

        vm_scanner = ViewMatrixScanner(memory_manager)

        print("\n1. Busca autom√°tica")
        print("2. Busca em range espec√≠fico")
        print("3. Ler ViewMatrix de endere√ßo conhecido")
        print("4. Monitorar ViewMatrix")
        print("5. Testar convers√£o World-to-Screen")

        choice = input("\nEscolha uma op√ß√£o: ").strip()

        if choice == "1":
            # Busca autom√°tica
            print("\nüîç Iniciando busca autom√°tica por ViewMatrix...")
            candidates = vm_scanner.scan_for_viewmatrix()

            if candidates:
                print(f"\n‚úÖ Encontrados {len(candidates)} candidatos:")
                for i, addr in enumerate(candidates[:10]):  # Mostra apenas os primeiros 10
                    matrix = vm_scanner.read_viewmatrix(addr)
                    if matrix:
                        cam_pos = matrix.get_camera_position()
                        print(f"  {i+1}. 0x{addr:X} - C√¢mera: ({cam_pos[0]:.2f}, {cam_pos[1]:.2f}, {cam_pos[2]:.2f})")

                best = vm_scanner.get_best_candidate()
                if best:
                    print(f"\nüéØ Melhor candidato: 0x{best:X}")

                    # Oferecer para exportar
                    if input("\nExportar informa√ß√µes? (y/n): ").lower() == 'y':
                        vm_scanner.export_viewmatrix_info(f"viewmatrix_scan_{memory_manager.process_id}.json")
            else:
                print("‚ùå Nenhuma ViewMatrix encontrada")

        elif choice == "2":
            # Busca em range espec√≠fico
            try:
                start_addr = int(input("Endere√ßo inicial (hex, ex: 0x400000): "), 16)
                end_addr = int(input("Endere√ßo final (hex, ex: 0x800000): "), 16)

                print(f"\nüîç Buscando ViewMatrix entre 0x{start_addr:X} e 0x{end_addr:X}...")
                candidates = vm_scanner.scan_for_viewmatrix((start_addr, end_addr))

                if candidates:
                    print(f"\n‚úÖ Encontrados {len(candidates)} candidatos no range especificado")
                    for addr in candidates:
                        print(f"  ‚Ä¢ 0x{addr:X}")
                else:
                    print("‚ùå Nenhuma ViewMatrix encontrada no range")

            except ValueError:
                print("‚ùå Endere√ßos inv√°lidos")

        elif choice == "3":
            # Ler de endere√ßo conhecido
            try:
                addr = int(input("Endere√ßo da ViewMatrix (hex, ex: 0x12345678): "), 16)

                matrix = vm_scanner.read_viewmatrix(addr)
                if matrix and matrix.is_valid():
                    cam_pos = matrix.get_camera_position()
                    print(f"\n‚úÖ ViewMatrix v√°lida encontrada!")
                    print(f"üìç Posi√ß√£o da c√¢mera: ({cam_pos[0]:.3f}, {cam_pos[1]:.3f}, {cam_pos[2]:.3f})")
                    print(f"üî¢ Matrix:")
                    for row in matrix.matrix:
                        print(f"  [{row[0]:8.3f} {row[1]:8.3f} {row[2]:8.3f} {row[3]:8.3f}]")
                else:
                    print("‚ùå ViewMatrix inv√°lida ou n√£o encontrada")

            except ValueError:
                print("‚ùå Endere√ßo inv√°lido")

        elif choice == "4":
            # Monitorar ViewMatrix
            try:
                addr = int(input("Endere√ßo da ViewMatrix para monitorar (hex): "), 16)

                def matrix_callback(matrix):
                    cam_pos = matrix.get_camera_position()
                    print(f"\rüìπ C√¢mera: ({cam_pos[0]:7.2f}, {cam_pos[1]:7.2f}, {cam_pos[2]:7.2f})", end="", flush=True)

                print("\nüé• Iniciando monitoramento... (Ctrl+C para parar)")
                vm_scanner.monitor_viewmatrix(addr, matrix_callback)

                try:
                    while True:
                        import time
                        time.sleep(1)
                except KeyboardInterrupt:
                    print("\n\n‚èπÔ∏è Monitoramento parado")

            except ValueError:
                print("‚ùå Endere√ßo inv√°lido")

        elif choice == "5":
            # Testar convers√£o World-to-Screen
            try:
                addr = int(input("Endere√ßo da ViewMatrix (hex): "), 16)
                matrix = vm_scanner.read_viewmatrix(addr)

                if not matrix or not matrix.is_valid():
                    print("‚ùå ViewMatrix inv√°lida")
                    return

                # Entrada de coordenadas do mundo
                world_x = float(input("Coordenada X do mundo: "))
                world_y = float(input("Coordenada Y do mundo: "))
                world_z = float(input("Coordenada Z do mundo: "))

                # Dimens√µes da tela
                screen_w = int(input("Largura da tela (ex: 1920): ") or "1920")
                screen_h = int(input("Altura da tela (ex: 1080): ") or "1080")

                # Convers√£o
                screen_pos = matrix.world_to_screen((world_x, world_y, world_z), screen_w, screen_h)

                if screen_pos:
                    print(f"\n‚úÖ Coordenadas de tela: ({screen_pos[0]}, {screen_pos[1]})")
                    print(f"üìç Posi√ß√£o v√°lida na tela!")
                else:
                    print("‚ùå Coordenadas fora da tela ou atr√°s da c√¢mera")

            except (ValueError, TypeError):
                print("‚ùå Valores inv√°lidos")

        else:
            print("‚ùå Op√ß√£o inv√°lida")

    except Exception as e:
        print(f"‚ùå Erro no ViewMatrix Scanner: {e}")
        import traceback
        traceback.print_exc()

def handle_aob_scan():
    """Gerencia busca por Array of Bytes"""
    from aob_scan import AOBScanner

    # Garante que memory_manager est√° acess√≠vel
    global memory_manager

    if not memory_manager.is_attached():
        print("‚ùå Nenhum processo anexado")
        return

    try:
        print("\nüîç AOB SCANNER")
        print("=" * 50)

        aob_scanner = AOBScanner(memory_manager)

        aob_pattern = input("Digite o padr√£o AOB (ex: A1 B2 ?? C3): ").strip().upper()
        start_addr_str = input("Endere√ßo inicial (hex, ex: 0x400000, deixe em branco para padr√£o): ").strip()
        end_addr_str = input("Endere√ßo final (hex, ex: 0x800000, deixe em branco para padr√£o): ").strip()

        start_addr = None
        end_addr = None

        if start_addr_str:
            try:
                start_addr = int(start_addr_str, 16)
            except ValueError:
                print("‚ùå Endere√ßo inicial inv√°lido")
                return

        if end_addr_str:
            try:
                end_addr = int(end_addr_str, 16)
            except ValueError:
                print("‚ùå Endere√ßo final inv√°lido")
                return

        print(f"\nüîç Buscando padr√£o '{aob_pattern}'...")
        if start_addr is not None and end_addr is not None:
            print(f"  Entre 0x{start_addr:X} e 0x{end_addr:X}")

        candidates = aob_scanner.scan_aob(aob_pattern, (start_addr, end_addr) if start_addr and end_addr else None)

        if candidates:
            print(f"\n‚úÖ Encontrados {len(candidates)} correspond√™ncias:")
            for addr in candidates[:20]:  # Limita a exibi√ß√£o
                print(f"  ‚Ä¢ 0x{addr:X}")
        else:
            print("‚ùå Nenhum resultado encontrado")

    except Exception as e:
        print(f"‚ùå Erro no AOB Scanner: {e}")
        import traceback
        traceback.print_exc()

def handle_memory_scan():
    """Gerencia opera√ß√µes de scan de mem√≥ria"""
    from scanner import MemoryScanner, ScanType, DataType

    global memory_manager

    if not memory_manager.is_attached():
        print("‚ùå Nenhum processo anexado")
        return

    try:
        scanner = MemoryScanner(memory_manager)
        
        print("\nüîç SCANNER DE MEM√ìRIA")
        print("=" * 50)
        
        # Tipo de dado
        print("Tipos de dados dispon√≠veis:")
        print("1. int32 (n√∫meros inteiros 32-bit)")
        print("2. int64 (n√∫meros inteiros 64-bit)")
        print("3. float (n√∫meros decimais)")
        print("4. double (n√∫meros decimais precisos)")
        print("5. string (texto)")
        
        data_type_choice = input("\nEscolha o tipo de dado (1-5): ").strip()
        data_type_map = {
            "1": "int32", "2": "int64", "3": "float", 
            "4": "double", "5": "string"
        }
        
        if data_type_choice not in data_type_map:
            print("‚ùå Tipo inv√°lido")
            return
            
        data_type_str = data_type_map[data_type_choice]
        data_type = DataType(data_type_str)
        
        # Valor a buscar
        value_str = input(f"Digite o valor a buscar ({data_type_str}): ").strip()
        
        if not value_str:
            print("‚ùå Valor n√£o pode estar vazio")
            return
            
        # Converte valor
        try:
            if data_type in [DataType.INT32, DataType.INT64]:
                value = int(value_str)
            elif data_type in [DataType.FLOAT, DataType.DOUBLE]:
                value = float(value_str)
            else:
                value = value_str
        except ValueError:
            print("‚ùå Valor inv√°lido para o tipo escolhido")
            return
        
        print(f"\nüîç Iniciando scan para {data_type_str}: {value}")
        
        # Executa scan
        results = scanner.first_scan(value, data_type, ScanType.EXACT)
        
        print(f"‚úÖ Scan conclu√≠do: {len(results)} resultados encontrados")
        
        if results:
            print("\nPrimeiros 10 resultados:")
            for i, result in enumerate(results[:10]):
                print(f"  {i+1}. 0x{result.address:08X} = {result.value}")
                
            if len(results) > 10:
                print(f"  ... e mais {len(results) - 10} resultados")
        
    except Exception as e:
        print(f"‚ùå Erro no scan: {e}")

def handle_pointer_resolve():
    """Gerencia resolu√ß√£o de ponteiros"""
    from pointer import PointerResolver

    global memory_manager

    if not memory_manager.is_attached():
        print("‚ùå Nenhum processo anexado")
        return

    try:
        print("\nüîó RESOLU√á√ÉO DE PONTEIROS")
        print("=" * 50)
        
        resolver = PointerResolver(memory_manager)
        
        base_addr_str = input("Endere√ßo base (hex, ex: 0x400000): ").strip()
        offsets_str = input("Offsets separados por v√≠rgula (ex: 0x10,0x20,0x30): ").strip()
        
        if not base_addr_str or not offsets_str:
            print("‚ùå Endere√ßo base e offsets s√£o obrigat√≥rios")
            return
            
        # Converte endere√ßo base
        try:
            if base_addr_str.startswith('0x'):
                base_addr = int(base_addr_str, 16)
            else:
                base_addr = int(base_addr_str)
        except ValueError:
            print("‚ùå Endere√ßo base inv√°lido")
            return
            
        # Converte offsets
        try:
            offsets = []
            for offset_str in offsets_str.split(','):
                offset_str = offset_str.strip()
                if offset_str.startswith('0x'):
                    offsets.append(int(offset_str, 16))
                else:
                    offsets.append(int(offset_str))
        except ValueError:
            print("‚ùå Offsets inv√°lidos")
            return
        
        print(f"\nüîç Resolvendo ponteiro...")
        print(f"Base: 0x{base_addr:X}")
        print(f"Offsets: {', '.join(f'0x{off:X}' for off in offsets)}")
        
        final_addr = resolver.resolve_pointer_chain(base_addr, offsets)
        
        if final_addr:
            print(f"‚úÖ Endere√ßo final: 0x{final_addr:X}")
            
            # Tenta ler valor
            value = memory_manager.read_int32(final_addr)
            if value is not None:
                print(f"üìç Valor atual: {value}")
            else:
                print("‚ö†Ô∏è N√£o foi poss√≠vel ler o valor")
        else:
            print("‚ùå Falha ao resolver ponteiro")
            
    except Exception as e:
        print(f"‚ùå Erro na resolu√ß√£o: {e}")

def handle_edit_value():
    """Gerencia edi√ß√£o de valores na mem√≥ria"""
    global memory_manager

    if not memory_manager.is_attached():
        print("‚ùå Nenhum processo anexado")
        return

    try:
        print("\n‚úèÔ∏è EDITAR VALOR NA MEM√ìRIA")
        print("=" * 50)
        
        addr_str = input("Endere√ßo (hex, ex: 0x12345678): ").strip()
        value_str = input("Novo valor: ").strip()
        
        if not addr_str or not value_str:
            print("‚ùå Endere√ßo e valor s√£o obrigat√≥rios")
            return
            
        # Converte endere√ßo
        try:
            if addr_str.startswith('0x'):
                address = int(addr_str, 16)
            else:
                address = int(addr_str)
        except ValueError:
            print("‚ùå Endere√ßo inv√°lido")
            return
            
        # Tenta converter valor como int32 primeiro
        try:
            value = int(value_str)
            
            print(f"\nüìù Escrevendo valor {value} no endere√ßo 0x{address:X}...")
            
            if memory_manager.write_int32(address, value):
                print("‚úÖ Valor escrito com sucesso!")
                
                # Verifica se foi escrito corretamente
                read_value = memory_manager.read_int32(address)
                if read_value == value:
                    print(f"‚úì Verificado: {read_value}")
                else:
                    print(f"‚ö†Ô∏è Valor lido: {read_value} (diferente do escrito)")
            else:
                print("‚ùå Falha ao escrever valor")
                
        except ValueError:
            print("‚ùå Valor deve ser um n√∫mero inteiro")
            
    except Exception as e:
        print(f"‚ùå Erro ao editar valor: {e}")

def handle_attach_process():
    """Gerencia anexa√ß√£o a processos"""
    global memory_manager

    try:
        print("\nüîó ANEXAR A PROCESSO")
        print("=" * 50)
        
        # Lista processos
        print("Buscando processos...")
        processes = memory_manager.list_processes()
        
        print(f"\nProcessos encontrados ({len(processes)}):")
        print(f"{'PID':<8} {'Nome'}")
        print("-" * 40)
        
        # Mostra apenas os primeiros 20 para n√£o poluir
        for proc in processes[:20]:
            print(f"{proc['pid']:<8} {proc['name']}")
            
        if len(processes) > 20:
            print(f"... e mais {len(processes) - 20} processos")
        
        pid_str = input("\nDigite o PID do processo: ").strip()
        
        if not pid_str:
            print("‚ùå PID n√£o pode estar vazio")
            return
            
        try:
            pid = int(pid_str)
        except ValueError:
            print("‚ùå PID deve ser um n√∫mero")
            return
            
        print(f"\nüîó Tentando anexar ao processo PID {pid}...")
        
        if memory_manager.attach_to_process(pid):
            print(f"‚úÖ Anexado com sucesso ao processo: {memory_manager.process_name}")
        else:
            print("‚ùå Falha ao anexar ao processo")
            print("   Verifique se o PID est√° correto e se voc√™ tem permiss√µes")
            
    except Exception as e:
        print(f"‚ùå Erro ao anexar processo: {e}")

def handle_process_details():
    """Mostra detalhes do processo anexado"""
    global memory_manager

    if not memory_manager.is_attached():
        print("‚ùå Nenhum processo anexado")
        return

    try:
        print("\nüìã DETALHES DO PROCESSO")
        print("=" * 50)
        
        print(f"PID: {memory_manager.process_id}")
        print(f"Nome: {memory_manager.process_name}")
        print(f"Handle: {memory_manager.process_handle}")
        
        # Tenta obter mais informa√ß√µes usando psutil
        try:
            import psutil
            process = psutil.Process(memory_manager.process_id)
            
            print(f"Status: {process.status()}")
            print(f"CPU: {process.cpu_percent():.1f}%")
            
            memory_info = process.memory_info()
            print(f"Mem√≥ria: {memory_info.rss / 1024 / 1024:.1f} MB")
            
            print(f"Threads: {process.num_threads()}")
            print(f"Criado em: {process.create_time()}")
            
        except ImportError:
            print("‚ö†Ô∏è psutil n√£o dispon√≠vel para informa√ß√µes detalhadas")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao obter detalhes: {e}")
            
    except Exception as e:
        print(f"‚ùå Erro ao mostrar detalhes: {e}")

def main_loop():
    """La√ßo principal do programa"""
    while True:
        choice = show_main_menu()

        if choice == "1":
            handle_memory_scan()
        elif choice == "2":
            handle_pointer_resolve()
        elif choice == "3":
            handle_edit_value()
        elif choice == "4":
            handle_attach_process()
        elif choice == "5":
            handle_process_details()
        elif choice == "6":
            handle_aob_scan()
        elif choice == "7":
            handle_viewmatrix_scanner()
        elif choice == "8":
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida")

if __name__ == "__main__":
    # Define o t√≠tulo da janela do console no Windows
    if platform.system() == "Windows":
        try:
            ctypes.windll.kernel32.SetConsoleTitleW("PyCheatEngine v1.0.0")
        except:
            pass

    # Cria inst√¢ncia global do MemoryManager
    from memory import MemoryManager
    memory_manager = MemoryManager()

    # Inicia o la√ßo principal
    main_loop()

    print("\nüëã Obrigado por usar o PyCheatEngine!")